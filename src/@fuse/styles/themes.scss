@use 'sass:map';
@use '@angular/material' as mat;
@use 'user-themes' as userThemes;

// Include the core Angular Material styles
@include mat.core();

// Function to create M3 palette from custom color map
@function create-m3-palette($color-map) {
    @return (
        0: map.get($color-map, 50),
        10: map.get($color-map, 100),
        20: map.get($color-map, 200),
        25: map.get($color-map, 300),
        30: map.get($color-map, 400),
        40: map.get($color-map, 500),
        50: map.get($color-map, 600),
        60: map.get($color-map, 700),
        70: map.get($color-map, 800),
        80: map.get($color-map, 900),
        90: map.get($color-map, 950),
        95: map.get($color-map, 50),
        98: map.get($color-map, 50),
        99: #ffffff,
        100: #000000,
    );
}

// Custom color tokens for light and dark themes
$light-custom-tokens: (
    --mat-app-background-color: #f1f5f9,
    --mat-app-surface-color: #ddd,
    --mat-app-text-color: #1e293b,
    --mat-app-secondary-text-color: #64748b,
    --mat-divider-color: #e2e8f0,
    --mat-card-container-color: #ddd,
    --mat-dialog-container-color: #ddd,
    --mat-sidenav-container-color: #ddd,
    --mat-toolbar-container-color: #ddd,
    --mat-card-elevated-container-color: #ddd,
    --mat-table-background-color: #ddd
);

$dark-custom-tokens: (
    --mat-app-background-color: #0f172a,
    --mat-app-surface-color: #1e293b,
    --mat-app-text-color: #dddddd,
    --mat-app-secondary-text-color: #64748b,
    --mat-divider-color: rgba(241, 245, 249, 0.12),
    --mat-card-container-color: #1e293b,
    --mat-dialog-container-color: #1e293b,
    --mat-sidenav-container-color: #1e293b,
    --mat-toolbar-container-color: #0f172a,
    --mat-card-elevated-container-color: #1e293b,
    --mat-table-background-color: #1e293b
);

@each $theme-name, $theme in userThemes.$user-themes {
    // Extract color palettes from user theme
    $primary-colors: map.get($theme, primary);
    $accent-colors: map.get($theme, accent);
    $warn-colors: map.get($theme, warn);

    // Create M3 themes using built-in palettes as base
    $light-theme: mat.define-theme((
        color: (
            theme-type: light,
            primary: mat.$azure-palette,
            tertiary: mat.$blue-palette,
        ),
        typography: (
            brand-family: theme('fontFamily.sans'),
            plain-family: theme('fontFamily.sans'),
        ),
        density: (
            scale: 0
        )
    ));

    $dark-theme: mat.define-theme((
        color: (
            theme-type: dark,
            primary: mat.$azure-palette,
            tertiary: mat.$blue-palette,
        ),
        typography: (
            brand-family: theme('fontFamily.sans'),
            plain-family: theme('fontFamily.sans'),
        ),
        density: (
            scale: 0
        )
    ));

    // Apply themes with selectors and custom color overrides
    #{map.get($theme, selector)} .light,
    #{map.get($theme, selector)}.light {
        @include mat.all-component-themes($light-theme);

        // Apply custom color tokens
        @each $property, $value in $light-custom-tokens {
            #{$property}: #{$value};
        }

        // Override M3 colors with custom theme colors
        --mat-sys-primary: #{map.get($primary-colors, DEFAULT)};
        --mat-sys-on-primary: #{map.get(map.get($primary-colors, contrast), DEFAULT)};
        --mat-sys-primary-container: #{map.get($primary-colors, 100)};
        --mat-sys-on-primary-container: #{map.get(map.get($primary-colors, contrast), 100)};
        --mat-sys-tertiary: #{map.get($accent-colors, DEFAULT)};
        --mat-sys-on-tertiary: #{map.get(map.get($accent-colors, contrast), DEFAULT)};
        --mat-sys-error: #{map.get($warn-colors, DEFAULT)};
        --mat-sys-on-error: #{map.get(map.get($warn-colors, contrast), DEFAULT)};

        // Override component-specific colors
        --mdc-filled-button-container-color: #{map.get($primary-colors, DEFAULT)};
        --mdc-filled-button-label-text-color: #{map.get(map.get($primary-colors, contrast), DEFAULT)};
        --mdc-outlined-button-label-text-color: #{map.get($primary-colors, DEFAULT)};
        --mdc-outlined-button-outline-color: #{map.get($primary-colors, 200)};
    }

    #{map.get($theme, selector)} .dark,
    #{map.get($theme, selector)}.dark {
        @include mat.all-component-themes($dark-theme);

        // Apply custom color tokens
        @each $property, $value in $dark-custom-tokens {
            #{$property}: #{$value};
        }

        // Override M3 colors with custom theme colors for dark mode
        --mat-sys-primary: #{map.get($primary-colors, 400)};
        --mat-sys-on-primary: #{map.get(map.get($primary-colors, contrast), 400)};
        --mat-sys-primary-container: #{map.get($primary-colors, 800)};
        --mat-sys-on-primary-container: #{map.get(map.get($primary-colors, contrast), 800)};
        --mat-sys-tertiary: #{map.get($accent-colors, 400)};
        --mat-sys-on-tertiary: #{map.get(map.get($accent-colors, contrast), 400)};
        --mat-sys-error: #{map.get($warn-colors, 400)};
        --mat-sys-on-error: #{map.get(map.get($warn-colors, contrast), 400)};

        // Override component-specific colors for dark mode
        --mdc-filled-button-container-color: #{map.get($primary-colors, 600)};
        --mdc-filled-button-label-text-color: #{map.get(map.get($primary-colors, contrast), 600)};
        --mdc-outlined-button-label-text-color: #{map.get($primary-colors, 400)};
        --mdc-outlined-button-outline-color: #{map.get($primary-colors, 700)};
    }
}
